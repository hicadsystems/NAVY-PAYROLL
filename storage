const pool = require('../../config/db');
const restoreService = require('../../services/payroll-calculations/restoreService');

exports.restore = async (req, res) => {
  try {
    const [bt05Rows] = await pool.query("SELECT ord AS year, mth AS month, sun FROM py_stdrate WHERE type='BT05' LIMIT 1");
    if (!bt05Rows.length) return res.status(404).json({ error: 'BT05 not found' });
    const { year, month, sun } = bt05Rows[0];

    if (sun < 889) return res.status(400).json({ error: 'Backup must exist before restoring.' });

    const user = req.user_fullname || 'System Restore';
    const result = await restoreService.restoreBackup(year, month, user);

    await pool.query("UPDATE py_stdrate SET sun = 888, createdby = ? WHERE type = 'BT05'", [user]);

    res.json({ status: 'SUCCESS', stage: 'Restore', progress: 'Payroll restore completed', nextStage: 'Re-run backup/calculations', result });
  } catch (err) {
    console.error('Restore error:', err);
    res.status(500).json({ status: 'FAILED', message: err.message });
  }
};

const pool = require('../../../config/db');
const { startLog, updateLog } = require('../helpers/logService');

exports.runMonthEnd = async (year, month, user) => {
  const logId = await startLog('PayrollCalc', 'MonthEnd', year, month, user);
  try {
    const [rows] = await pool.query('CALL py_37Monthend_optimized(?, ?, ?)', [year, month, user]);
    await updateLog(logId, 'SUCCESS', 'Month-End completed and new period initialized.');
    return { message: 'Month-End completed successfully', details: rows[0] };
  } catch (err) {
    await updateLog(logId, 'FAILED', err.message);
    throw err;
  }
};


// monthend.js
const express = require('express');
const router = express.Router();
const verifyToken = require('../../middware/authentication');
const { monthend } = require('../../controllers/payroll-calculations/monthendController');
router.post('/monthend', verifyToken, monthend);
module.exports = router;